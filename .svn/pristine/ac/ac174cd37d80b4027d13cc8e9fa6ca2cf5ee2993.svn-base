package kr.ac.ajou.umc.service.event;


import kr.ac.ajou.umc.GpsDistanceCalc;
import kr.ac.ajou.umc.repository.event.EventRepository;
import kr.ac.ajou.umc.vo.event.*;
import kr.ac.ajou.umc.vo.truck.TruckUpdateWithUserIdVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

@Service
public class EventService {

    @Autowired
    private EventRepository repository;

    public List<EventVO> getEventList()
    {
        return repository.getEventList();
    }

    public List<EventSearchListVO> searchWithEventName(String eventTitle, EventGpsVO gps)
    {

        List<EventSearchListVO> result = repository.searchWithEventName(eventTitle);

        //gps값을 이용하여 가까운 거리 순으로 정렬
        //디폴트값 km 단위 기준으로 상위 표출
        GpsDistanceCalc calc = GpsDistanceCalc.getGpsDistanceCaculator();

        //GPS 거리 계산
        for(int list_size = 0 ; list_size < result.size() ; list_size++)
        {
            double dist = calc.distance(result.get(list_size).getLat(), result.get(list_size).getLon(), gps.getLat(), gps.getLon(),"kilometer");
            result.get(list_size).setDistance(dist);
        }

        //GPS 거리 순으로 정렬
        calc.eventBubbleSort(result);

        return result;
    }

    public void addEventImage(long eventId, MultipartFile multifile)
    {
        String fileName = UUID.randomUUID().toString().replace("-", "");
        String[] format = multifile.getOriginalFilename().split(".");
        String fileDir = "/home/chrow16/deploy/image/" + fileName + ".jpg";
        File file = new File(fileDir);
        try {

            multifile.transferTo(file);


        } catch (Exception e) {
            throw new RuntimeException("FAIL! -> message = " + e.getMessage());
        }

        EventImageUpdateVO euvo = new EventImageUpdateVO();
        euvo.setId(eventId);
        euvo.setImageLink(fileDir);

        repository.updateEventImage(euvo);
    }

    public EventDescriptionVO searchWithEventId(long eventId)
    {
        return repository.searchWithEventId(eventId);
    }

    public List<EventDescriptionVO> searchWithUserId(long userId)
    {
        return repository.searchWithUserId(userId);
    }

    public void addEvent(EventCreateVO event)
    {
        repository.addEvent(event);
    }

    public void updateEvent(EventUpdateVO event)
    {
        repository.updateEvent(event);
    }

    public void deleteEvent(long eventId)
    {
        repository.deleteEvent(eventId);
    }
}
